getting staRted
========================================================
author: Martin Monkman & Julie Hawkins with Stephanie Yurchak
date: 2017-11-17
autosize: true




hobbit
========================================================
title: false


<div align="center">
<img src="going-on-adventure.gif" width=1200 height=600>
</div>



our workflow
========================================================


<div align="center">
<img src="data-science.png" width=1200 height=600>
</div>



Why R?
========================================================

_*Opinionated Analysis Development*_

Workflow and tooling so that analysis is:

- Reproducible and Auditable
- Accurate
- Collaborative


What is R? 
========================================================

Base R: a script-based statistical analysis tool

- With many, many packages (data, statistical functions, wrappers of other software)

- And with RStudio, an IDE that streamlines much of your work

- Including authoring tools for communication



An amazing example: the steps
========================================================

* screen shot of SPSS file
* screen shot of R code part 1
* screen shot of CSV output
* show Excel output
  - start with Excel with README tab
  - run code part 3 WU
  - show full file




WES: micro data (SPSS file - variables)
========================================================

<div align="center">
<img src="1.SPSSdata1.png" width=1170 height=700>
</div>



WES: micro data (SPSS file - data)
========================================================

<div align="center">
<img src="2.SPSSdata2.png" width=1170 height=700>
</div>



WES: driver log
========================================================

<div align="center">
<img src="4.Driver_Log.png" width=1038 height=272>
</div>



WES: response log
========================================================

<div align="center">
<img src="5.Response_Log.png" width=1112 height=207>
</div>


WES: scores log
========================================================

<div align="center">
<img src="6.Scores_Log.png" width=1257 height=160>
</div>





The RStudio screen 
========================================================

(switch to live!)

- walk through the panes



Let's do something! 
========================================================

Type in the console window:

```{r}

3 + 4

```


Assign values to variables 
========================================================

Start a new R script file

```{r}

x <- 3
y <- 4

x + y

z <- x + y
z

```




Packages
========================================================

R uses "packages" to extend the functionality

One set of packages is known as "the tidyverse"

* `ggplot2` - charts and graphs
* `dplyr` - data wrangling
* `tidyr` - to spread and gather data tables



Installing the tidyverse (one package that bundles other packages)
========================================================

To install a package:

```{r eval = FALSE}

install.packages("tidyverse")

```

To load a package, once it's installed:

```{r}

library(tidyverse)

```


`ggplot2`: package for data visualization
========================================================

A simple x-y scatterplot...

```{r}

ggplot(data = mpg, aes(x = displ, y = hwy)) + 
  geom_point()

```

`ggplot2`: package for data visualization
========================================================
title: false

```{r, echo = FALSE, fig.height = 10, fig.width = 15}

A simple x-y scatterplot...

```{r}

ggplot(data = mpg, aes(x = displ, y = hwy)) + 
  geom_point()

```


A regression model (base R)
========================================================


```{r}

lm(data = mpg, hwy ~ displ)

mpg_model <- lm(data = mpg, hwy ~ displ)

mpg_model

```


The summary from the regression model
========================================================


```{r eval = FALSE}

summary(mpg_model)

```



Now...add the regression line to the plot
========================================================

```{r}

ggplot(data = mpg, aes(x = displ, y = hwy)) + 
  geom_point() +
  stat_smooth(method = lm)          # add the `lm` 

```

Now...add the regression line to the plot
========================================================
title: false

```{r, echo = FALSE, fig.height = 10, fig.width = 15}

```{r}

ggplot(data = mpg, aes(x = displ, y = hwy)) + 
  geom_point() +
  stat_smooth(method = lm)          # add the `lm` 

```


Data Visualization
========================================================

_R Data for Science_ - Garrett Grolemund & Hadley Wickham

http://r4ds.had.co.nz/data-visualisation#aesthetic-mappings.html


More elaborate analysis

* a lot of ways you can modify the chart



Replace regression line with smoothed LOESS line
========================================================


```{r}
ggplot(data = mpg, aes(x = displ, y = hwy)) + 
  geom_point() +
  stat_smooth(method = loess)          # add the `loess` 

```


Replace regression line with smoothed LOESS line
========================================================
title: false

```{r, echo = FALSE, fig.height = 10, fig.width = 15}
ggplot(data = mpg, aes(x = displ, y = hwy)) + 
  geom_point() +
  stat_smooth(method = loess)          # add the `loess` 

```


More elaborate examples
========================================================

Replace regression line with smoothed LOESS line

```{r}
ggplot(data = mpg, aes(x = displ, y = hwy)) + 
  geom_point() +
  stat_smooth(method = loess)          # add the `loess` 

```



Highlight the "class" of vehicle
========================================================

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = class))
```


Highlight the "class" of vehicle
========================================================
title: false


```{r, echo = FALSE, fig.height = 10, fig.width = 15}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = class))
```



Highlight the "class" of vehicle, add a smoothed trend line for "subcompact" and "suv"
========================================================


```{r}
fancyplot <- ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(mapping = aes(color = class)) + 
  geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE, color = "purple") +
  geom_smooth(data = filter(mpg, class == "suv"), se = FALSE, color = "pink") 

fancyplot +
  theme_bw() +
  labs(title = "Fuel economy by engine displacement",
       subtitle = "Sub-compacts are more efficient than SUVs",
       caption = "Source: the Lahman baseball database", 
       x = "Engine displacement (cubic litres)", y = "Miles per gallon (highway)") 
  
  
```



Highlight the "class" of vehicle, add a smoothed trend line for "subcompact" and "suv"
========================================================
title: false


```{r, echo = FALSE, fig.height = 10, fig.width = 15}
fancyplot <- ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(mapping = aes(color = class)) + 
  geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE, color = "purple") +
  geom_smooth(data = filter(mpg, class == "suv"), se = FALSE, color = "pink") 

fancyplot +
  theme_bw() +
  labs(title = "Fuel economy by engine displacement",
       subtitle = "Sub-compacts are more efficient than SUVs",
       caption = "Source: EPA (fueleconomy.gov)", 
       x = "Engine displacement (cubic litres)", y = "Miles per gallon (highway)") 
  
  
```


  
  
  


Quick detour: Getting help
========================================================

Typing a question mark (?) and a package or function brings up the Help info (bottom right pane)

Type the following:

```{r eval = FALSE}

?mpg


```

Or, once a package is loaded, it is accessible through the Help pane (bottom right) 
and will auto-fill once you start typing, which often shows many other things!




Quick detour: base R
========================================================

```{r eval = FALSE}

View(mpg)       ## opens data to view, too big to show here

names(mpg)      ## lists the names of all variables in dataset

summary(mpg)    ## provides statistical summary of data

```





Quick detour: dplyr
========================================================

If you don't already have tidyverse (installed and) loaded, do so, OR (install and) load dplyr

```{r}

library(dplyr)

```

A few of dplyr's many useful data manipulation verbs:
- mutate()
- select()
- rename()
- filter()
- summarise()
- arrange()

```{r}

mpg %>%
  summarise(minYear = min(year), maxYear = max(year))

```

https://github.com/tidyverse/dplyr



Something that looks like a pivot table
========================================================


```{r}

mpg %>%                                 ## take my data, then (%>%)
  group_by(class) %>%                   ## group data by variable "class", then
  summarise(mean = mean(displ)) %>%     ## calculate mean of variable "displ" for each, then
  arrange(desc(mean))                   ## sort descending by that mean (ascending is simply "arrange(mean)")

```



A pivot table crosstab
========================================================
Note that spread() (and gather(), it's complement) are from tidyr

```{r}

class_by_cyl <- mpg %>%
  group_by(class, cyl) %>%
  summarise(mean = mean(displ)) %>%
  arrange(desc(mean))

class_by_cyl_pivot <- class_by_cyl %>%
  spread(cyl, value = mean, drop = FALSE)

class_by_cyl_pivot <- as.data.frame(class_by_cyl_pivot)

class_by_cyl_pivot

```



Dplyr::Mutate
========================================================

You can create variables that may (or may not) be useful in your analysis

``` {r}
mpg <- mpg %>%
  mutate(mpg_per_cubic_litre = hwy / displ)

summary(mpg$mpg_per_cubic_litre)

```



Some more examples
========================================================

Ministry of Environment: Land Designations
http://www.env.gov.bc.ca/soe/indicators/land/land-designations.html


U.S. Census: ethnic diversity by neighborhood
https://walkerke.shinyapps.io/neighborhood_diversity/

